{"version":3,"file":"/home/airam/Escritorio/P6 DSI/src/ejercicio-3/Cifrado.ts","sources":["/home/airam/Escritorio/P6 DSI/src/ejercicio-3/Cifrado.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAa,OAAO;IAIlB;;;;;KAKC;IACD,YAAY,OAAc,EAAE,GAAU,EAAE,QAAgB;QAThD,aAAQ,GAAU,6BAA6B,CAAC;QAUtD,IAAI,QAAQ,KAAK,SAAS;YAAE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACrD,IAAI,GAAG,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM;YAAE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;aAC5C;YACH,KAAK,IAAI,CAAC,GAAE,CAAC,EAAE,GAAG,CAAC,MAAM,IAAE,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC9C,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;aACf;YACD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;SAChB;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IACD;;;OAGG;IACH,IAAI;QACF,IAAI,MAAM,GAAU,EAAE,CAAC;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,MAAM,IAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC5H;QAAA,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IACD;;;OAGG;IACH,MAAM;QACJ,IAAI,MAAM,GAAU,EAAE,CAAC;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAChF,MAAM,IAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aAC5H;;gBAAM,MAAM,IAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SACnI;QAAA,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA7CD,0BA6CC","sourcesContent":["/**\n * Clase Cifrado encargada de Cifrar o descifrar mediante el cifrado cesar\n */\nexport class Cifrado {\n  private alphabet:string = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\n  private key:string;\n  private message:string;\n  /**\n * Constructor\n * @param message mensaje que queremos cifrar/descifrar\n * @param key clave que utilizaremos para el cifrado/descifrado\n * @param alphabet alfabeto que se utilizará, opcional\n */\n  constructor(message:string, key:string, alphabet?:string) {\n    if (alphabet !== undefined) this.alphabet = alphabet;\n    if (key.length == message.length) this.key = key;\n    else {\n      for (let j =0; key.length<=message.length; j++) {\n        key += key[j];\n      }\n      this.key = key;\n    }\n    this.message = message;\n  }\n  /**\n   * Metodo encargado del cifrado\n   * @returns devuelve el mensaje cifrado\n   */\n  code():string {\n    let result:string = '';\n    for (let i = 0; i<this.message.length; i++) {\n      result+= this.alphabet[(this.alphabet.indexOf(this.message[i])+this.alphabet.indexOf(this.key[i])+1)%this.alphabet.length];\n    };\n    return result;\n  }\n  /**\n   * Metodo encargado del descifrado\n   * @returns devuelve el mensaje descifrado\n   */\n  uncode():string {\n    let result:string = '';\n    for (let i = 0; i<this.message.length; i++) {\n      if (this.alphabet.indexOf(this.message[i])>=(this.alphabet.indexOf(this.key[i]))) {\n        result+= this.alphabet[(this.alphabet.indexOf(this.message[i])-this.alphabet.indexOf(this.key[i])-1)%this.alphabet.length];\n      } else result+= this.alphabet[(this.alphabet.indexOf(this.message[i])-this.alphabet.indexOf(this.key[i])-1)+this.alphabet.length];\n    };\n    return result;\n  }\n}\n\n"]}